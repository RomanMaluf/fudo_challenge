# This file is auto-generated by rspec-openapi https://github.com/k0kubun/rspec-openapi
#
# When you write a spec in spec/requests, running the spec with `OPENAPI=1 rspec` will
# update this file automatically. You can also manually edit this file.
---
openapi: 3.1.0
info:
  title: Fudo Challenge OpenAPI Documentation
  version: 1.0.0
  description: Fudo Challenge API
servers:
- url: http://0.0.0.0:9292
security:
- Authorization: []
paths:
  "/AUTHORS":
    get:
      summary: GET /AUTHORS
      responses:
        '200':
          description: returns Authors name
          content:
            application/json:
              schema:
                type: string
              example: Roman Elias Maluf
            text/plain:
              schema:
                type: string
              example: 'Roman Elias Maluf

                '
        '500':
          description: returns Authors name
          content:
            application/json:
              schema:
                type: object
                properties: {}
                required:
                - error
              example: {}
  "/jobs/22f32004-1a91-4d01-bc05-544c478f1fbd":
    get:
      summary: GET /jobs/22f32004-1a91-4d01-bc05-544c478f1fbd
      responses:
        '200':
          description: returns a specific job for show action
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
                  status:
                    type: string
                required:
                - job_id
                - status
              example:
                job_id: 22f32004-1a91-4d01-bc05-544c478f1fbd
                status: queued
  "/jobs/all":
    get:
      summary: GET /jobs/all
      responses:
        '200':
          description: returns a list of all jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: object
                    properties:
                      job1:
                        type: string
                      job2:
                        type: string
                      job3:
                        type: string
                    required:
                    - job1
                    - job2
                    - job3
                required:
                - jobs
              example:
                jobs:
                  job1: queued
                  job2: failed
                  job3: completed
        '401':
          description: returns a list of all jobs
          content:
            application/json:
              schema:
                type: object
                properties: {}
                required:
                - error
              example: {}
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
        example: b45ff06902520bc86f45667e5fbd444d:1748827146
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
        example: application/json
  "/login":
    post:
      summary: POST /login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
              - username
              - password
            example:
              username: admin
              password: password
      responses:
        '200':
          description: returns token when correct credentials are provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                required:
                - message
                - token
              example:
                message: Login successful
                token: aef8342f085ef386ed9ebeef4db101a6:1748828369
        '500':
          description: returns token when correct credentials are provided
          content:
            application/json:
              schema:
                type: object
                properties: {}
                required:
                - error
              example: {}
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
        example: application/json
  "/products":
    get:
      summary: GET /products
      responses:
        '200':
          description: after 5 seconds new product should be available
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                      required:
                      - id
                      - name
                required:
                - products
              example:
                products:
                - id: 1
                  name: Sample Product
                - id: 2
                  name: New Product
                - id: 11fd8331
                  name: Test Job
                - id: eb8980c3
                  name: New Product
                  price: 19.99
                - id: 7704828d
                  name: Delayed Product
                  price: 29.99
        '401':
          description: returns unauthorized when missing credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
              example:
                error: Token is required
        '500':
          description: returns 500 when an internal error occurs
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
              example:
                error: Internal Server Error
    post:
      summary: POST /products
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                price:
                  type: number
                  format: float
              required:
              - id
              - name
              - price
            example:
              id: eb8980c3
              name: New Product
              price: 19.99
      responses:
        '201':
          description: enqueues a job to insert a product
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  product:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      price:
                        type: number
                        format: float
                    required:
                    - id
                    - name
                    - price
                  job_id:
                    type: string
                required:
                - message
                - product
                - job_id
              example:
                message: Product enqueued for insertion
                product:
                  id: eb8980c3
                  name: New Product
                  price: 19.99
                job_id: 413bbb2f-763a-465c-9c35-64a14940cda8
        '401':
          description: after 5 seconds new product should be available
          content:
            application/json:
              schema:
                type: object
                properties: {}
                required:
                - error
              example: {}
components:
  securitySchemes:
    Authorization:
      description: Authenticate API requests via a Token
      type: apiKey
      in: header
      name: AUTHORIZATION
